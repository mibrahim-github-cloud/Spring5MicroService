package org.rvslab.chapter3.reactive;


import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.context.embedded.LocalServerPort;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.http.client.reactive.ReactorClientHttpConnector;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.reactive.function.client.ClientRequest;
import org.springframework.web.reactive.function.client.WebClient;

import reactor.core.publisher.Mono;

import reactor.ipc.netty.http.HttpClient;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class ApplicationTests {

	private WebClient webClient;

	@LocalServerPort
	private int port;

	@Before
	public void setup() {
		
		this.webClient = WebClient.create(new ReactorClientHttpConnector());
		
	}
 
	
	@Test
	public void customArgument() throws Exception {
		ClientRequest<Void> request = ClientRequest
									.GET("http://localhost:{port}", this.port)
									.build();

		Mono<Greet> result = webClient
				   .exchange(request)
				   .then(response -> response.bodyToMono(Greet.class)).log();
		
		 
		
	}

	 	
	
	
	 
	
}


import java.net.URI;
import java.util.function.Consumer;
import java.util.function.Function;

import reactor.core.publisher.Mono;
import reactor.ipc.netty.http.client.HttpClientOptions;
import reactor.ipc.netty.options.ClientOptions;
import reactor.ipc.netty.http.client.HttpClient;
import reactor.ipc.netty.http.client.HttpClientException;

import org.springframework.http.HttpMethod;

/**
 * Reactor-Netty implementation of {@link ClientHttpConnector}
 *
 * @author Brian Clozel
 * @see HttpClient
 * @since 5.0
 */
public class ReactorClientHttpConnector implements ClientHttpConnector {

	private final HttpClient httpClient;


	/**
	 * Create a Reactor Netty {@link ClientHttpConnector} with default {@link ClientOptions}
	 * and SSL support enabled.
	 */
	public ReactorClientHttpConnector() {
		this.httpClient = HttpClient.create();
	}

	/**
	 * Create a Reactor Netty {@link ClientHttpConnector} with the given {@link ClientOptions}
	 */
	public ReactorClientHttpConnector(Consumer<? super HttpClientOptions> clientOptions) {
		this.httpClient = HttpClient.create(clientOptions);
	}


	@Override
	public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,
			Function<? super ClientHttpRequest, Mono<Void>> requestCallback) {

		return httpClient
				.request(io.netty.handler.codec.http.HttpMethod.valueOf(method.name()),
						uri.toString(),
						httpClientRequest -> requestCallback
								.apply(new ReactorClientHttpRequest(method, uri, httpClientRequest)))
				.otherwise(HttpClientException.class, exc -> Mono.just(exc.getResponse()))
				.map(ReactorClientHttpResponse::new);
	}

}
