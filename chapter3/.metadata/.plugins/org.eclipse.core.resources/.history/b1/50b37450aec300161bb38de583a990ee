


import java.net.URI;
import java.util.function.Consumer;
import java.util.function.Function;

import org.springframework.http.HttpMethod;
import org.springframework.http.client.reactive.ClientHttpConnector;
import org.springframework.http.client.reactive.ClientHttpRequest;
import org.springframework.http.client.reactive.ClientHttpResponse;
import org.springframework.http.client.reactive.ReactorClientHttpRequest;
import org.springframework.http.client.reactive.ReactorClientHttpResponse;

import reactor.core.publisher.Mono;
import reactor.ipc.netty.config.ClientOptions;
import reactor.ipc.netty.config.HttpClientOptions;
import reactor.ipc.netty.http.HttpClient;
import reactor.ipc.netty.http.client.HttpClientException;

/**
 * Reactor-Netty implementation of {@link ClientHttpConnector}
 *
 * @author Brian Clozel
 * @see HttpClient
 * @since 5.0
 */
 class ReactorClientHttpConnector implements ClientHttpConnector {

	private final HttpClient httpClient;


	/**
	 * Create a Reactor Netty {@link ClientHttpConnector} with default {@link ClientOptions}
	 * and SSL support enabled.
	 */
	public ReactorClientHttpConnector() {
		this.httpClient = HttpClient.create();
	}

	/**
	 * Create a Reactor Netty {@link ClientHttpConnector} with the given {@link ClientOptions}
	 */
	public ReactorClientHttpConnector(Consumer<? super HttpClientOptions> clientOptions) {
		this.httpClient = HttpClient.create(clientOptions);
	}


	@Override
	public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,
			Function<? super ClientHttpRequest, Mono<Void>> requestCallback) {

		return httpClient
				.request(io.netty.handler.codec.http.HttpMethod.valueOf(method.name()),
						uri.toString(),
						httpClientRequest -> requestCallback
								.apply(new ReactorClientHttpRequest(method, uri, httpClientRequest)))
				.otherwise(HttpClientException.class, exc -> Mono.just(exc.getResponse()))
				.map(ReactorClientHttpResponse::new);
	}

}
